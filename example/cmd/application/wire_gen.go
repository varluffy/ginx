// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/spf13/viper"
	"github.com/varluffy/rich/app"
	"github.com/varluffy/rich/example/api/middleware"
	"github.com/varluffy/rich/example/api/v1"
	"github.com/varluffy/rich/example/internal/biz"
	"github.com/varluffy/rich/example/internal/repo"
	"github.com/varluffy/rich/example/internal/service"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initApp(conf *viper.Viper, logger *zap.Logger) (*app.App, func(), error) {
	server := newHttpServer(conf, logger)
	token := middleware.NewToken(conf)
	middlewareMiddleware := middleware.NewMiddleware(token)
	repoRepo, cleanup, err := repo.NewRepo(conf, logger)
	if err != nil {
		return nil, nil, err
	}
	authRepo := repo.NewAuthRepo(repoRepo, logger)
	authUsecase := biz.NewAuthUsecase(authRepo, logger)
	authService := service.NewAuthService(authUsecase, logger, token)
	serviceService := service.NewService(authService)
	router := v1.NewRouter(server, middlewareMiddleware, serviceService)
	appApp := newApp(logger, server, router)
	return appApp, func() {
		cleanup()
	}, nil
}
